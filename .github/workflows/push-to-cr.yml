# 1. Workflow
name: Push Image to Container Registry

on:
  push:
    branches:
      - master
    paths-ignore:
      - "README.md"
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  REPOSITORY: demo-reactive-client
  ECR_DEPLOY_ROLE_ARN: arn:aws:iam::870575329641:role/github-actions-role

# 2. Jobs
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    # 3. Steps
    steps:
      # 4. Actions
      - name: Checkout repository
        uses: actions/checkout@v4

      # https://medium.com/israeli-tech-radar/openid-connect-and-github-actions-to-authenticate-with-amazon-web-services-9a66b3b88e92
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      # https://github.com/aws-actions/configure-aws-credentials#OIDC
      - name: Configure AWS credentials from ecr deployer account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ env.ECR_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          # cache: 'maven'

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: |
            ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean verify

      - name : Copy jar to staging directory
        run: mkdir staging && cp target/*.jar staging

      - name : Upload jar to GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
           name: Package
           path: staging
           overwrite: true
           retention-days: 10

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

# Deploy to ECS https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service
